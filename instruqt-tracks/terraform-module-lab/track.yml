slug: terraform-module-lab
id: o7fzb43piufk
type: track
title: Terraform Module Lab
teaser: |
  A preconfigured lab environment for learning about Terraform modules.
description: |
  This track can be used for hands-on labs working with Terraform modules.
icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/terraform.png
tags:
- terraform
- modules
owner: hashicorp
developers:
- roger@hashicorp.com
- lance@hashicorp.com
- scarolan@hashicorp.com
private: true
published: true
challenges:
- slug: setup-our-environment
  id: sw7bqqbs0pkd
  type: challenge
  title: "\U0001F3E1 Moving in - Set Up Your Workspace"
  teaser: |
    Configure your code editor with the Terraform extension and open a workspace.
  notes:
  - type: text
    contents: |
      Setting up your environment...
      Keep an eye on the bottom right corner to know when you can get started.
  - type: text
    contents: The terraform command line tool is available for MacOS, FreeBSD, OpenBSD,
      Windows, Solaris and Linux.
  - type: text
    contents: The terraform language is designed to be both human and machine-readable.
  - type: text
    contents: Most modern text editors support Terraform syntax highlighting.
  assignment: |-
    Open the "Code Editor" tab on the left. You'll see some terraform configuration files for the hashicat application. Open the file called "main.tf". Note that the file type at the bottom of the screen was automatically set to "hcl" to give optimized syntax highlighting and colors.

    When you edit any of these files, you will see a blue dot and a disk icon on the tab above it. **Be sure to click the disk icon to save your changes!** There is no "auto-saving" in the Instruqt editor!

    Throughout this track, please execute all commands on the "Shell" tab.

    You should see some files in the explorer bar on the left side menu. These are terraform config files for the hashicat application.

    Congratulations, you are ready to start working with Terraform.

    Click the **Check** button to continue.
  tabs:
  - title: Code Editor
    type: code
    hostname: workstation
    path: /root/workspace
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 7200
- slug: terraform-cloud-setup
  id: wor8lync260t
  type: challenge
  title: ☁️ Terraform Cloud Setup
  teaser: |
    Terraform Cloud offers almost all the same features as on-premise Terraform Enterprise.
  notes:
  - type: text
    contents: Terraform Cloud offers features like remote state and a private module
      registry.
  assignment: |-
    During this challenge you'll sign up for a free Terraform Cloud account. Click on the URL below and sign up for an account if you don't have one already:

    https://app.terraform.io/signup/account

    If you already have an account you can simply sign in with your existing credentials.

    Next you'll configure a token for running terraform commands from your workstation.

    Let's generate a new **user token** for use on your workstation. Visit the User Settings > Tokens page in Terraform Cloud:

    https://app.terraform.io/app/settings/tokens

    Click on the **Create an API token** button. You can name the token whatever you like. Copy the entire token using your mouse or the small copy-paste icon.

    Back in the Instruqt track, you need to add your API token to a file called "credentials.tfrc.json". Select the "Credentials File" tab and open the `/root/.terraform.d/credentials.tfrc.json` file directly.

    Replace the part that says YOURTOKEN with what you copied from Terraform Cloud. Be sure to save the file.

    Your token is now safely stored in the "credentials.tfrc.json" file.

    Return to your Code Editor tab and edit the "remote_backend.tf" file, replacing the `YOURORGANIZATION` placeholder with your organization name. Save the file.
  tabs:
  - title: Code Editor
    type: code
    hostname: workstation
    path: /root/workspace
  - title: Credentials File
    type: code
    hostname: workstation
    path: /root/.terraform.d/credentials.tfrc.json
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 7200
- slug: versioned-infrastructure
  id: rhwwafn4nthr
  type: challenge
  title: "\U0001F4BB Version Controlled Infrastructure"
  teaser: |
    Terraform modules can be stored in your Version Control System.
  notes:
  - type: text
    contents: Terraform modules can be stored in your Version Control System (VCS),
      and automatically imported into the Private Module Registry
  assignment: |-
    In order for different teams and individuals to be able to work on the same Terraform code, you need to use a Version Control System (VCS). Terraform Cloud can integrate with the most popular VCS systems including GitHub, GitLab and Bitbucket.

    You will need a free GitHub.com account for this challenge. We recommend using a personal account for training instead your work account (if you have one).

    Follow the **Configuring GitHub Access** section of the TFC documentation to connect your GitHub account to your Terraform Organization.

    https://www.terraform.io/docs/cloud/vcs/github.html

    Once you've configured GitHub access, you can import modules into your private module registry.
  tabs:
  - title: Code Editor
    type: code
    hostname: workstation
    path: /root/hashicat-aws
  - title: Shell
    type: terminal
    hostname: workstation
  - title: Configuring Github Access
    type: external
    url: https://www.terraform.io/docs/cloud/vcs/github.html
  - title: Terraform Cloud
    type: external
    url: https://app.terraform.io
  difficulty: basic
  timelimit: 1800
- slug: private-module-registry
  id: jpljzmbguwas
  type: challenge
  title: "\U0001F4DA Private Module Registry"
  teaser: |
    Some of your users want a simple way to deploy databases and network configurations. Enter the Private Module Registry, where you can store standard, re-usable Terraform configurations that others can use in their own workspaces.
  notes:
  - type: text
    contents: Storing your modules in a git repo allows you to do code reviews and
      tag different versions.
  assignment: |-
    In this challenge you'll learn to use the Private Module Registry, which allows you to store and version re-usable snippets of Terraform code. Think of modules like custom resources for your own environment.

    Instead of writing this module from scratch you can copy the existing vpc module from the public Terraform registry. Visit this URL to view the VPC module:

    https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws

    Note the **Source:** link that points at the github repository for this module. Click on the Source URL. As you did in previous workshop tracks, create your own fork of this repository with the **Fork** button.

    Back in the Terraform Cloud control panel, click on the **Modules** link at the top of the page. Click on the **+Add Module** button. Click on the Github button and select the terraform-aws-vpc module that you just forked.

    Click on **Publish Module**.

    Create a new Terraform file called `main.tf` in your "workspace" directory and add a module to your module in it to create a new VPC. You'll also want to add an `aws` provider block and set its `region` attribute to `eu-west-1` to match the availability zones in the sample code.

    HINT: The docs are your friend. They might even have an example of how the code should look. But be sure to set the source of the module to the one shown for it in your Private Module Registry. Don't use the source from the module's README.md file.

    After you finish editing your main.tf file, you can initialize your Terraform configuration with this command:

    ```
    terraform init
    ```

    You can find your AWS keys with these commands:
    ```
    echo $AWS_ACCESS_KEY_ID
    echo $AWS_SECRET_ACCESS_KEY
    ```

    Add your AWS keys to your new workspace, "tfc-module-lab", as environment variables on the workspace's Variables tab. Be sure to mark your `AWS_SECRET_ACCESS_KEY` environment variable as sensitive.

    Now, do an apply against your workspace with this command:
    ```
    terraform apply
    ```

    Type "yes" if you are prompted to confirm the apply.

    If all goes well you should see a new VPC being built in the streaming apply log. Wait until your terraform apply command is complete, then click the `Check` button to verify your work.

    Please destroy the VPC you created with this command:

    ```
    terraform destroy
    ```

    Type "yes" when asked to confirm the destroy plan.

    Congratulations on completing the Terraform Module Lab!
  tabs:
  - title: Code Editor
    type: code
    hostname: workstation
    path: /root/workspace
  - title: Shell
    type: terminal
    hostname: workstation
  - title: Terraform Cloud
    type: external
    url: https://app.terraform.io
  difficulty: basic
  timelimit: 1800
checksum: "6927212131122536910"
